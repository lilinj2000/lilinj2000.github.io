<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李林江的技术博客]]></title>
  <link href="http://lilinj2000.github.io/atom.xml" rel="self"/>
  <link href="http://lilinj2000.github.io/"/>
  <updated>2013-11-27T22:27:03+08:00</updated>
  <id>http://lilinj2000.github.io/</id>
  <author>
    <name><![CDATA[李林江]]></name>
    <email><![CDATA[lilinj2000@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Memcached之内存存储方式介绍]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/27/memcached-for-memory-management/"/>
    <updated>2013-11-27T21:45:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/27/memcached-for-memory-management</id>
    <content type="html"><![CDATA[<h2>Memcached中的内存管理</h2>

<p>Memcached中保存的数据都存储在memcached内置的内存存储空间中。</p>

<p>数据仅存在于内存中，因此重启memcached、重启操作系统会导致全部数据消失。</p>

<p>内存容量达到指定值之后，会基于LRU(Least Recently Used)算法自动删除不使用的缓存，当然这个可以通过配置项来禁止，默认是删除。</p>

<!-- more -->


<p>Memcached本身是为缓存而设计的服务器，并没有过多考虑数据的永久性问题。但是可以利用memcacheDB实现事务恢复、持久化和分布式复制等功能。</p>

<p>Memcached默认情况下采用了名为Slab Allocator的机制分配、管理内存。</p>

<h2>Slab分配器简介</h2>

<p>slab是Linux操作系统的一种内存分配机制。</p>

<p>其主要是针对一些<strong>经常分配并释放的对象</strong>，如进程描述符等，这些对象的大小一般比较小，如果直接采用伙伴系统来进行分配和释放，不仅会造成大量的内碎片，而且处理速度也太慢。</p>

<p>slab分配器是基于<strong>对象进行管理</strong>的，相同类型的对象归为一类(如进程描述符就是一类)，每当要申请这样一个对象，slab分配器就从一个slab列表中分配一个这样大小的单元出去，而当要释放时，将其重新保存在该列表中，而不是直接返回给伙伴系统，从而避免内存碎片。</p>

<p>slab分配器并不丢弃已分配的对象，而是释放并把它们保存在内存中。当以后又要请求新的对象时，就可以从内存直接获取而不用重复初始化。</p>

<p>其基本原理是按照预先规定的大小，将分配的内存分割成特定长度的块（chunk），并把尺寸相同的块分成组（chunk的集合）如图。</p>

<p><img src="http://lilinj2000.github.io/images/2013/11/slab_allocate_overview.png" alt="Slab Allocator 示例图" /></p>

<p>分配给slab的所有内存空间叫做Page，在Memcached中，它默认是1MB。</p>

<h2>在Memcached中，数据是如何被存入slab，并最终缓存到chunk</h2>

<p>Memcached根据数据的大小，选择最适合数据大小的slab。</p>

<p>Memcached中保存着slab内空闲chunk的列表，根据该列表选择chunk，然后将数据缓存于其中。</p>

<p><img src="http://lilinj2000.github.io/images/2013/11/slab_allocate_select_method.png" alt="Slab Allocate 选择算法" /></p>

<p>这种机制也给memcached带来了新的问题：由于分配的是特定长度的内存，因此无法有效利用分配的内存。例如，将100字节的数据缓存到128字节的chunk中，剩余的28字节就浪费了（如下图）。</p>

<p><img src="http://lilinj2000.github.io/images/2013/11/slab_allocate_storage.png" alt="Slab Allocate 数据存储方式" /></p>

<p>针对此问题还没有完美的解决方案，但是memcached文档中给出一种思路：
如果预先知道存储的数据的公用大小，或者仅缓存大小相同的数据的情况下，只要使用适合数据大小的组的列表，就可以减少浪费。</p>

<p>另外，也可以通过使用Growth Facor 进行调优，在某种程度上控制slab之间的差异。</p>

<p>因此，在使用memcached前最好能够重新计算一下数据的预期平均长度，调整growth factor ，以获得最恰当的设置。</p>

<p>参考：</p>

<p><a href="http://blog.csdn.net/ldwtill/article/details/8167813">mecached 基础（一）&mdash;memcached介绍</a></p>

<p><a href="http://baike.baidu.com/view/5870164.htm">百度百科 &ndash; slab</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转Memcached by telnet之Increment and Decrement Command]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-increment-and-decrement/"/>
    <updated>2013-11-27T13:21:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-increment-and-decrement</id>
    <content type="html"><![CDATA[<h2>Increment/Decrement</h2>

<p>命令&#8221;incr&#8221; 和 &ldquo;decr&rdquo; 是用来增加或者减少相应的数据项， 数据项作为64位无符号的10进制数来对待。</p>

<p>如果当前此数据项，不是一个10进制的数据，则&#8221;incr&#8221;和&#8221;decr&#8221;将返回错误。</p>

<p>当然，如果当前的数据项不存在，也将返回错误。</p>

<!-- more -->


<p>格式：</p>

<pre><code>incr &lt;key&gt; &lt;value&gt; [noreply]\r\n

or

decr &lt;key&gt; &lt;value&gt; [noreply]\r\n
</code></pre>

<ul>
<li><p>&lt;key> 数据项的唯一标识符</p></li>
<li><p>&lt;value> 增量或者减量的值，如在当前值上增加100，或者减少100</p></li>
<li><p>[noreply] 可选项，指示server不需要返回</p></li>
</ul>


<p>返回信息：</p>

<ul>
<li><p>&ldquo;NOT_FOUND\r\n&rdquo; 数据项没发现</p></li>
<li><p>&ldquo;&lt;value>\r\n&rdquo;  更新成功后的新的值</p></li>
</ul>


<p>&ldquo;decr&rdquo; 减少到小于0时，新的值将被设为0</p>

<p>&ldquo;incr&rdquo; 增加到超过了64位无符号的最大值，将会溢出</p>

<pre><code>add key1 0 0 2
10
STORED
incr key1 100
110
get key1
VALUE key1 0 3
110
END
decr key1 50
60
get key1
VALUE key1 0 2
60
END
decr key1 70
0
get key1
VALUE key1 0 1
0
END
add key2 0 0 2
ab
STORED
incr key2 2
CLIENT_ERROR cannot increment or decrement non-numeric value
</code></pre>

<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转Memcached by telnet之Deletion and Touch Command]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-deletion-and-touch/"/>
    <updated>2013-11-27T10:52:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-deletion-and-touch</id>
    <content type="html"><![CDATA[<h2>Deletion</h2>

<p>从memcached中删除数据项.</p>

<p>格式：</p>

<pre><code>delete &lt;key&gt; [noreply]\r\n
</code></pre>

<ul>
<li><p>&lt;key> 被删除的数据项的唯一标识符</p></li>
<li><p>[noreply] 可选项，指示server不需要返回</p></li>
</ul>


<p>返回信息：</p>

<ul>
<li><p>&ldquo;DELETED\r\n&rdquo; 删除成功</p></li>
<li><p>&ldquo;NOT_FOUND\r\n&rdquo; 唯一标识符key没有找到</p></li>
</ul>


<!-- more -->


<pre><code>get key2
VALUE key2 0 3
abc
END
delete key2
DELETED
delete key1
NOT_FOUND
</code></pre>

<h2>Touch</h2>

<p>更新已经存在数据项的过期时间(expiration time)</p>

<p>格式：</p>

<pre><code>touch &lt;key&gt; &lt;exptime&gt; [noreply]\r\n
</code></pre>

<ul>
<li><p>&lt;key> 被更新数据项的唯一标识符</p></li>
<li><p>&lt;exptime> 过期时间</p>

<ul>
<li><p>数据项已经过期了， 不能被设置过期时间</p>

<pre><code>  add key1 0 5 2
  ab
  STORED

  #after 5 seconds, the key1 is deleted by system
  get key1
  END
  touch key1 10
  NOT_FOUND
</code></pre></li>
<li><p>数据项未过期，但是已经过了一段时间，新的过期时间，是从当前时间开始计算，或者是一个新的绝对时间。</p>

<pre><code>  &gt; cat touch_test.sh
  #! /usr/bin/sh
  {
  echo "add key1 0 30 2"
  sleep 1
  echo "ab"
  sleep 20
  echo "touch key1 60"
  sleep 40
  echo "get key1"
  sleep 20
  echo "get key1"
  } | telnet localhost 11211

  &gt; ./touch_test.sh
  Trying 127.0.0.1...
  Connected to localhost.
  Escape character is '^]'.
  STORED          #add key1 successful
  TOUCHED         #after 20s, the touch key1 is successful
  VALUE key1 0 2  #after 40s again, the key1 is fetched.
  ab
  END             
  END             #after 20s again, the key1 is deleted
  Connection closed by foreign host.
</code></pre></li>
<li><p>此过期时间与storage commands(set, add, replace, append, prepend, cas)选项中的过期时间，是同一个意思。</p></li>
</ul>
</li>
<li><p>[noreply] 可选项，指示server不需要返回</p></li>
</ul>


<p>返回信息：</p>

<ul>
<li><p>&ldquo;TOUCHED\r\n&rdquo; 更新成功</p></li>
<li><p>&ldquo;NOT_FOUND\r\n&rdquo; 唯一标识符key没有找到</p></li>
</ul>


<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转Memcached by telnet之Retrieval Command]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/26/playing-memcached-by-telnet-retrieval-command/"/>
    <updated>2013-11-26T16:06:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/26/playing-memcached-by-telnet-retrieval-command</id>
    <content type="html"><![CDATA[<h2>Retrieval commands</h2>

<h3>格式：</h3>

<pre><code>get &lt;key&gt;*\r\n
gets &lt;key&gt;*\r\n
</code></pre>

<ul>
<li>&lt;key>* 一个或者多个key，由空白符分隔。</li>
</ul>


<p>在零个或者多个key/value被返回后，server端会返回字符串&#8221;END\r\n&#8221;指示返回结束。</p>

<!-- more -->


<p>返回信息：</p>

<pre><code>VALUE &lt;key&gt; &lt;flags&gt; &lt;bytes&gt; [&lt;cas unique&gt;]\r\n
&lt;data block&gt;\r\n
</code></pre>

<ul>
<li><p>&lt;key> 发送的key值</p></li>
<li><p>&lt;flags> 在数据被存储时，设置的flags信息</p></li>
<li><p>&lt;bytes> 存储的数据长度，不包括分隔符 <code>\r\n</code></p></li>
<li><p>[&lt;cas unique>] 唯一标识的64位整数，在Command <code>cas</code> 中被使用</p></li>
<li><p>&lt;data block> 数据块</p></li>
</ul>


<p>数据不能被获取的情况有：</p>

<ul>
<li><p>数据从来没有被存储</p>

<pre><code>  get key3
  END
</code></pre></li>
<li><p>数据被存储，但是获取时已经过期</p>

<pre><code>  add key1 0 5 2
  ab
  STORED
  #after 5 seconds, the data is expiration
  get key1
  END
</code></pre></li>
<li><p>数据被存储，数据已经显示被删除了</p>

<pre><code>  add key1 0 0 2
  ab
  STORED
  delete key1
  DELETED
  get key1
  END
</code></pre></li>
<li><p>数据被存储，由于内存原因，基于LRU算法，数据已经被系统删除</p></li>
</ul>


<h3>Command get</h3>

<p>获取一个或者多个key的值，<strong>不返回</strong><code>&lt;cas unique&gt;</code></p>

<pre><code>get key1
VALUE key1 0 2
ab
END
get key1 key2
VALUE key1 0 2
ab
VALUE key2 0 3
abc
END
get key1 key3  #without stored key3
VALUE key1 0 2
ab
END
</code></pre>

<h3>Command gets</h3>

<p>获取一个或者多个key的值，<strong>返回</strong><code>&lt;cas unique&gt;</code></p>

<pre><code>gets key1
VALUE key1 0 2 7
ab
END
gets key1 key2
VALUE key1 0 2 7
ab
VALUE key2 0 3 3
abc
END
gets key1 key3
VALUE key1 0 2 7
ab
END
</code></pre>

<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转Memcached by telnet之Storage Command]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/26/playing-memcached-by-telnet-storage-command/"/>
    <updated>2013-11-26T14:14:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/26/playing-memcached-by-telnet-storage-command</id>
    <content type="html"><![CDATA[<h2>环境</h2>

<ul>
<li><p>memcahced 帮助信息</p>

<pre><code>  &gt; memcahched -h
  memcached 1.4.15_6_g87e2f36
  -p &lt;num&gt;      TCP port number to listen on (default: 11211)
  -U &lt;num&gt;      UDP port number to listen on (default: 11211, 0 is off)
  ...
</code></pre></li>
<li><p>start memcached</p>

<pre><code>  &gt; memcached 
</code></pre></li>
<li><p>telnet to memcached server by default port 11211</p>

<pre><code>  &gt; telnet localhost 11211
</code></pre></li>
</ul>


<!-- more -->


<h2>Storage commands</h2>

<h3>格式：</h3>

<pre><code>&lt;command name&gt; &lt;key&gt; &lt;flags&gt; &lt;exptime&gt; &lt;bytes&gt; [noreply]\r\n  
&lt;data block&gt;\r\n
</code></pre>

<ul>
<li><p>&lt;key> memcached存储数据的唯一标识符。key是一个字符串，目前它的长度被限制在<strong>250</strong>个字符；key<strong>不能包括控制字符或者空白字符</strong>。</p></li>
<li><p>&lt;flags> 一个16位的无符号整数（十进制格式），server只是存储它，当client获取数据时返回同样的值。client可以用这个字段作为特殊的标记使用。<br/>
  在memcached版本1.2. 1或以后，这个字段是一个32位，但是最好你还是限制使用16位，为了兼容以前的版本。</p></li>
<li><p>&lt;exptime> 数据过期时间。<br/>
  值为0时，表示永远不过期，当然也可能会被删除，因为LRU算法。<br/>
  非0时，表示一个有效的系统时间，或者是一个当前时间的offset，单位是秒；它确保client不能获取数据当达到这个过期时间（由server段的时间决定）时。</p></li>
<li><p>&lt;bytes> 数据的字节数，不包括分隔符，<code>\r\n</code>，字节数也可以为0，表示空数据。</p></li>
<li><p>[noreply] 可选项，指示server端可以不返回信息。<br/>
  注意，当命令格式不对时，server不能可靠地解析此选项 <em>noreply</em> ，此时，server会返回错误给客户端，如果客户端没有处理错误信息，可能会有些问题。当用这个选项时，最好确保客户端永远只构造有效的命令请求。</p></li>
<li><p><data block\> 一块任意8位组的数据，其长度应该是前面给到的 <code>&lt;byters&gt;</code>值。</p></li>
</ul>


<p>返回信息描述：</p>

<ul>
<li><p>&ldquo;STORED\r\n&rdquo; 存储数据成功.</p></li>
<li><p>&ldquo;NOT_STORED\r\n&rdquo; 此数据没有被存储。</p></li>
</ul>


<h3>Command set</h3>

<p>设置数据，如果key已经存在，就更新数据，如果key不存在，就增加数据。</p>

<pre><code>set key1 0 0 2
12
STORED
</code></pre>

<h3>Command add</h3>

<p>新增数据，如果key已经存在，会返回失败。</p>

<pre><code>add key2 0 0 3
abc
STORED
add key1 0 0 3
abc
NOT_STORED
</code></pre>

<h3>Command replace</h3>

<p>更新数据，如果key不存在，则返回失败。</p>

<pre><code>replace key1 0 0 2
12
STORED
replace key3 0 0 2
ab
NOT_STORED
</code></pre>

<h3>Command append</h3>

<p>在已经存在的数据后面追加数据，如果key不存在，则返回失败。</p>

<pre><code>append key1 0 0 2
ab
STORED
append key3 0 0 2
ab
NOT_STORED
</code></pre>

<h3>Command prepend</h3>

<p>在已经存在的数据前面追加数据，如果key不存在，则返回失败。</p>

<pre><code>prepend key1 0 0 2
cd
STORED
prepend key3 0 0 3
abc
NOT_STORED
</code></pre>

<h3>Command cas</h3>

<p>check and set, 只有此数据自上次获取以后没有被更新，才设置数据。</p>

<p>格式：</p>

<pre><code>cas &lt;key&gt; &lt;flags&gt; &lt;exptime&gt; &lt;bytes&gt; &lt;cas unique&gt; [noreply]\r\n
&lt;data block&gt;\r\n
</code></pre>

<ul>
<li><cas unique> 一个64位的唯一的已经存在的entry, 此值是通过<code>gets</code>命令获得的.</li>
</ul>


<p>返回信息：</p>

<ul>
<li><p>&ldquo;EXISTS\r\n&rdquo; 指示要存储的数据自从上次获取以来已经被修改了，命令存储失败。</p></li>
<li><p>&ldquo;NOT_FOUND\r\n&rdquo; 指示试图存储的数据不存在，命令存储失败.</p></li>
</ul>


<p>示例：</p>

<pre><code>gets key1
VALUE key1 0 6 6 #最后一项是&lt;cas unique&gt;值
cd12ab
END

cas key1 0 0 2 6
ab
STORED

cas key1 0 0 2 6
cd
EXISTS

gets key1
VALUE key1 0 2 7 #&lt;cas unique&gt;值已经变成7
ab
END

cas key3 0 0 2 8
12
NOT_FOUND
</code></pre>

<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown editing介绍 - sublime text 2插件]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/26/introducing-markdown-editing-plugin-for-sublime-text2/"/>
    <updated>2013-11-26T10:50:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/26/introducing-markdown-editing-plugin-for-sublime-text2</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>MarkdownEditing是ttscoff编写的一个Sublime Text 2插件，用于在ST2中进行Markdown文件的编写。插件中添加一系列的快捷键和自动处理，方便大家在ST2中进行MD的编写。</p>

<p><a href="http://brettterpstra.com/2012/05/17/markdown-editing-for-sublime-text-2-humble-beginnings/">Markdown Editing for Sublime Text 2: humble beginnings</a></p>

<p>Source code: <a href="https://github.com/ttscoff/MarkdownEditing">https://github.com/ttscoff/MarkdownEditing</a></p>

<!-- more -->


<h2>MarkdownEditing的功能</h2>

<h3>语法增强类</h3>

<ul>
<li><p>星号*、下划线_和反引号`自动配对</p></li>
<li><p>如输入的自动配对符号中间内容为空时，删除第一个符号时将直接删除整对符号</p></li>
<li><p>如输入自动配对符号后直接输入空格，则自动删除后面自动配对的符号</p></li>
<li><p>波浪线 ~ 包围的内容将转换为HTML中的 标签</p></li>
<li><p>当创建了列表后，回车将自动添加一个列表项。如列表项为空，再次回车将删除该列表项.</p></li>
</ul>


<h3>MarkdownEditing在Windows下面的快捷键</h3>

<ul>
<li><p>Ctrl+Win+V <em>选中的内容</em>将自动转换为<strong>行内式超链接</strong>，链接到剪贴板中的内容</p></li>
<li><p>Ctrl+Win+R <em>选中的内容将</em>自动转换为<strong>参考式超链接</strong>，链接到剪贴板中的内容</p></li>
<li><p>Ctrl+Win+K 插入一个<strong>标准的行内式超链接</strong></p></li>
<li><p>Shift+Win+K 插入一个<strong>标准的行内式图片</strong>（此快捷键可能与输入法有冲突）</p></li>
<li><p>Ctrl+1 至 Ctrl+6 插入一级至六级标题</p></li>
<li><p>Ctrl+I 选中的内容转换为<em>斜体</em></p></li>
<li><p>Ctrl+B 选中的内容转换为<strong>粗体</strong></p></li>
<li><p>Ctrl+Shift+6 自动插入一个脚注，并跳转到该脚注的定义中。</p></li>
<li><p>Alt+Shift+F 查找没有定义的脚注并自动添加其定义链接</p></li>
<li><p>Alt+Shift+G 查找没有定义的参考式超链接并自动添加其定义链接</p></li>
<li><p>Ctrl+Alt+S 脚注排序</p></li>
<li><p>Ctrl+Shift+. 缩进当前内容</p></li>
<li><p>Ctrl+Shift+, 提前当前内容</p></li>
</ul>


<p>参考：</p>

<p><a href="http://blog.edi-c.com/post/mod-mdediting-for-win">在Windows下面使用MarkdownEditing</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识 Memcached]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/24/warmup-memcached/"/>
    <updated>2013-11-24T16:13:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/24/warmup-memcached</id>
    <content type="html"><![CDATA[<h2>什么是 Memcached？</h2>

<blockquote><p>Free &amp; open source, high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.</p>

<p>Memcached is an in-memory key-value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, or page rendering.</p>

<p>Memcached is simple yet powerful. Its simple design promotes quick deployment, ease of development, and solves many problems facing large data caches. Its API is available for most popular languages.</p>

<p>At heart it is a simple Key/Value store.</p></blockquote>

<p>Memcached是一个<strong>免费，开源，高性能，分布式</strong>的内存对象cache系统。</p>

<p>Memcached是一个<strong>简单，强大</strong>的key/value存储。</p>

<!-- more -->


<h2>Memcached的历史</h2>

<p>official web site: <a href="http://www.memcached.org/">http://www.memcached.org/</a></p>

<p>project home: <a href="https://code.google.com/p/memcached/">https://code.google.com/p/memcached/</a></p>

<p>Memcached 是由 Brad Fitzpatrick 于2003年5月，为他的网站 LiveJournal 第一次开发的，后来由 Anatoly Vorobey 用 C 语言从写。</p>

<h2>Memcached 适合什么场合</h2>

<p><img src="http://lilinj2000.github.io/images/2013/11/memcached_general_use_case.png" alt="memcached general use case" /></p>

<p>Memcached 是“分布式”的内存对象缓存系统，那些不需要“分布”的，不需要共享的，或者干脆规模小到只有一台服务器的应用， memcached 不会带来任何好处，相反还会拖慢系统效率，因为网络连接同样需要资源，即使是UNIX本地连接也一样。</p>

<p>Memcached 在很多时候都是<strong>作为数据库前端 cache 使用的</strong>。因为它比数据库少了很多 SQL 解析、磁盘操作等开销，而且它是使用内存来管理数据的，所以它可以提供比直接读取数据库更好的性能，在大型系统中，访问同样的数据是很频繁的， memcached 可以大大降低数据库压力，使系统执行效率提升。</p>

<p>Memcached 也经常作为<strong>服务器之间数据共享的存储媒介</strong>，例如在 SSO 系统中保存系统单点登陆状态的数据就可以保存在 memcached 中，被多个应用共享。</p>

<p>Memcached 使用内存管理数据，所以它是<strong>易失</strong>的，当服务器重启，或者 memcached 进程中止，数据便会丢失，所以 memcached 不能用来持久保存数据。很多人的错误理解，memcached 的性能非常好，好到了内存和硬盘的对比程度，其实 memcached 使用内存并不会得到成百上千的读写速度提高，它的实际瓶颈在于网络连接，它和使用磁盘的数据库系统相比，好处在于它本身非常“轻”，因为没有过多的开销和直接的读写方式，它可以轻松应付非常大的数据交换量，所以经常会出现两条千兆网络带宽都满负荷了，memcached 进程本身并不占用多少CPU资源的情况。</p>

<p>Memcached 最大的优点是<strong>可以分布式的部署</strong>，这对于大规模应用来说也是必不可少的要求。</p>

<h2>Memcached 的主要用户有</h2>

<p><img src="http://lilinj2000.github.io/images/2013/11/memcached_typical_users.png" alt="memcached typical users" /></p>

<p>参考：</p>

<p><a href="http://haoshenqi.blogchina.com/1538799.html">Memcached&mdash;&mdash;-memcached实现内存缓存</a></p>

<p><a href="http://blog.csdn.net/ldwtill/article/details/8167813">mecached 基础（一）&mdash;memcached介绍</a></p>

<p><a href="http://wenku.baidu.com/link?url=TuT7znQSC6wyQ-sVmuq7iWGXYSm9h7cOJ_XXqV9L164GhqC83Vf60OH1Bf_mwmekeuZrE0cP2sgnWXrJjc3kmz4OmlEQWHtnfZJaXtRH8LK">Memcached浅析</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown 小结]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-summarize/"/>
    <updated>2013-11-22T14:28:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-summarize</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>偶然发现 githup 上提供自己搭建博客的功能，同时又有 octopress 这么好的一个工具可以使用。</p>

<p>终于，迫不及待的想尝试一下，自己来搭建一个博客。</p>

<p>一来可以和大家一起交流，</p>

<p>同时也是记录自己学习的一个过程。</p>

<p>octopress 默认是用 Markdown 语言来写的。</p>

<p>所以，我的博客就从学习 Markdown &ndash; 这个轻量级标记语言来开始。</p>

<!-- more -->


<h2>Markdown 基本思想</h2>

<p>Markdown 是一种轻量级的标记语言，同时其又是一个电子邮件风格的标记语言。</p>

<p>Markdown 的主要目的是编写<strong>易读易写</strong>的纯文本格式文档，
它让用户专注于文档的内容，而不要过于在文档的格式上花费太多的精力和时间。</p>

<p>其本身的语法就是使用最简单，同时也是最容易被理解的符号来标注，
让人易学易用，期望可以成为<strong>一种网络上的流行书写语言</strong>。</p>

<p><em>简单，易学，易用，易理解，易读，同时也易维护</em>。</p>

<h2>Markdown 语法小结</h2>

<ul>
<li><p>区块元素</p>

<ul>
<li><p>标题</p>

<blockquote><p>  类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 &ndash;
（第二阶标题）。</p>

<p>  类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。</p></blockquote></li>
<li><p>列表</p>

<blockquote><p>  无序列表： 用符号 *, +, -</p>

<p>  有序列表： 数字 - 点起始。 <code>1. list1</code></p>

<p>  嵌套列表，下一级列表由 4 个空格或者 1 个制表符缩进；
对于嵌套代码区块需要8个空格或者2个制表符缩进。</p></blockquote></li>
<li><p>段落和换行</p>

<blockquote><p>  段落是一个或者多个连续的文本行组成，由一个或者一个以上的空行来分隔。</p>

<p>  换行是插入两个或者两个以上的空格，再按回车。</p></blockquote></li>
<li><p>区块引用： 由符号 > 作为引用标记。</p></li>
<li><p>代码区块：由 4 个空格符或者 1 个制表符开始。</p></li>
<li><p>分割线：由3个或者3个以上的符号 *， -， _ 单独组成的一行，形成分割线。</p></li>
</ul>
</li>
<li><p>区块内元素</p>

<ul>
<li><p>代码：由 1 个或者多个 ` 反引号开始，和对应的 1
    个或者多个反引号结束。</p></li>
<li><p>强调：由两个 *，或者是两个 _ 包含的内容。 斜体则是由一个 *，
或者是一个 _ 包含的内容。</p></li>
<li><p>链接</p>

<blockquote><p>  行内链接 &mdash;&ndash; <code>[github](http://github.com)</code></p>

<p>  参考式链接：</p>

<pre><code>  [github] [1]
  [1]: http://github.com
  or
  [github] []
  [github]: http://github.com  
</code></pre>

<p>  自动链接 &mdash;&ndash; <code>&lt;http://github.com&gt;</code> or <code>&lt;sb@github.com&gt;</code></p></blockquote></li>
<li><p>图片：类似于链接，只是在 [] 前面多一个 !</p></li>
<li><p>支持用 \ 转义的符号有：</p>

<blockquote><pre><code>  \   反斜线
  `   反引号
  *   星号
  _   底线
  {}  花括号
  []  方括号
  ()  括弧
  #   井字号
  +   加号
  -   减号
  .   英文句点
  !   惊叹号
</code></pre></blockquote></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法介绍 - 代码和强调]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-code-and-em/"/>
    <updated>2013-11-22T13:55:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-code-and-em</id>
    <content type="html"><![CDATA[<h2>代码</h2>

<p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p>

<pre><code>Use the `printf()` function.
</code></pre>

<p>会产生：</p>

<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre>

<!-- more -->


<p>如果要在代码区段内<strong>插入反引号</strong>，你可以<strong>用多个反引号来开启和结束代码区段</strong>：</p>

<pre><code>``There is a literal backtick (`) here.``
</code></pre>

<p>这段语法会产生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>

<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>

<p>会产生：</p>

<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>

<pre><code>Please don't use any `&lt;blink&gt;` tags.
</code></pre>

<p>转为：</p>

<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre>

<p>你也可以这样写：</p>

<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre>

<p>以产生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre>

<h2>强调</h2>

<p>Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <strong>，例如：</p>

<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre>

<p>会转成：</p>

<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre>

<p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>

<p>强调也可以直接插在文字中间：</p>

<pre><code>un*frigging*believable
</code></pre>

<p>但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</p>

<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>

<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre>

<p>参考:</p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明（简体中文版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法介绍 - 自动链接和其他]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-autolink-and-others/"/>
    <updated>2013-11-22T13:55:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-autolink-and-others</id>
    <content type="html"><![CDATA[<h2>自动链接</h2>

<p>Markdown 支持以比较简短的自动链接形式来处理<strong>网址和电子邮件信箱</strong>，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>

<pre><code>&lt;http://example.com/&gt;
</code></pre>

<p>Markdown 会转为：</p>

<pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;
</code></pre>

<!-- more -->


<p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>

<pre><code>&lt;address@example.com&gt;
</code></pre>

<p>Markdown 会转成：</p>

<pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre>

<p>在浏览器里面，这段字串（其实是 <code>&lt;a href="mailto:address@example.com"&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「address@example.com」链接。</p>

<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>

<h2>反斜杠</h2>

<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p>

<pre><code>\*literal asterisks\*
</code></pre>

<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>

<pre><code>\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre>

<p>参考:</p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明（简体中文版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法介绍 - 图片]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-image/"/>
    <updated>2013-11-22T13:54:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-image</id>
    <content type="html"><![CDATA[<h2>图片</h2>

<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>

<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <strong>行内式和参考式</strong>。</p>

<p>行内式的图片语法看起来像是：</p>

<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg "Optional title")
</code></pre>

<!-- more -->


<p>详细叙述如下：</p>

<p>一个惊叹号 !
接着一个方括号，里面放上图片的替代文字
接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &lsquo;title&rsquo; 文字。</p>

<p>参考式的图片语法则长得像这样：</p>

<pre><code>![Alt text][id]
「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：

[id]: url/to/image  "Optional title attribute"
</code></pre>

<p>到目前为止， Markdown 还<em>没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签</em>。</p>

<p>参考:</p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明（简体中文版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法介绍 - 代码区块和分隔线]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-code-and-seprator/"/>
    <updated>2013-11-22T13:54:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-code-and-seprator</id>
    <content type="html"><![CDATA[<h2>代码区块</h2>

<p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p>

<!-- more -->


<p>要在 Markdown 中建立代码区块很简单，只要<strong>简单地缩进 4 个空格或是 1 个制表符</strong>就可以，例如，下面的输入：</p>

<p>这是一个普通段落：</p>

<pre><code>这是一个代码区块。
</code></pre>

<p>Markdown 会转换成：</p>

<pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个代码区块。
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>

<pre><code>Here is an example of AppleScript:

    tell application "Foo"
        beep
    end tell
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application "Foo"
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>

<p>在代码区块里面， <em>&amp; 、 &lt; 和 > 会自动转成 HTML 实体</em>，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>

<pre><code>&lt;div class="footer"&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>

<h2>分隔线</h2>

<p>你可以在<strong>一行中用三个以上的星号、减号、底线</strong>来建立一个分隔线，<em>行内不能有其他东西</em>。你<em>也可以在星号或是减号中间插入空格</em>。下面每种写法都可以建立分隔线：</p>

<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre>

<hr />

<p>参考:</p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明（简体中文版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法介绍 - 段落和换行]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-section-and-newline/"/>
    <updated>2013-11-22T13:52:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-section-and-newline</id>
    <content type="html"><![CDATA[<h2>段落和换行</h2>

<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有<strong>一个或一个以上的空行</strong>（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。<em>普通段落不该用空格或制表符来缩进</em>。</p>

<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p>

<!-- more -->


<p>如果你确实想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入<strong>两个以上的空格然后回车</strong>。</p>

<p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>

<p>参考:</p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明（简体中文版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法介绍 - 区块引用]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-quote/"/>
    <updated>2013-11-22T13:52:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/22/markdown-inroduction-for-quote</id>
    <content type="html"><![CDATA[<h2>区块引用 Blockquotes</h2>

<p>Markdown 标记区块引用是使用类似 email 中用 > 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 > ：</p>

<blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>

<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p></blockquote>

<!-- more -->


<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 > ：</p>

<blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>

<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p></blockquote>

<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 > ：</p>

<blockquote><p>This is the first level of quoting.</p>

<blockquote><p>This is nested blockquote.</p></blockquote>

<p>Back to the first level.</p></blockquote>

<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>

<blockquote><h2>这是一个标题。</h2>

<ol>
<li> 这是第一行列表项。</li>
<li> 这是第二行列表项。</li>
</ol>


<p>给出一些例子代码：</p>

<pre><code>return shell_exec("echo $input | $markdown_script");
</code></pre></blockquote>

<p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p>

<p>参考:</p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明（简体中文版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法介绍 - 链接]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/21/markdown-introduction-for-link/"/>
    <updated>2013-11-21T22:53:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/21/markdown-introduction-for-link</id>
    <content type="html"><![CDATA[<h2>链接</h2>

<p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p>

<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>

<p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>

<pre><code>This is [an example](http://example.com/ "Title") inline link.

[This link](http://example.net/) has no title attribute.
</code></pre>

<p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>

<pre><code>See my [About](/about/) page for details.
</code></pre>

<!-- more -->


<p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>

<pre><code>This is [an example][id] reference-style link.
</code></pre>

<p>你也可以选择性地在两个方括号中间加上一个空格：</p>

<pre><code>This is [an example] [id] reference-style link.
</code></pre>

<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>

<pre><code>[id]: http://example.com/  "Optional Title Here"
</code></pre>

<p>链接内容定义的形式为：</p>

<p>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字<br/>
接着一个冒号<br/>
接着一个以上的空格或制表符<br/>
接着链接的网址<br/>
选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</p>

<p>下面这三种链接的定义都是相同：</p>

<pre><code>[foo]: http://example.com/  "Optional Title Here"
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)
</code></pre>

<p>请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>

<p>链接网址也可以用方括号包起来：</p>

<pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"
</code></pre>

<p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>

<pre><code>[id]: http://example.com/longish/path/to/resource/here
    "Optional Title Here"
</code></pre>

<p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>

<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：</p>

<pre><code>[link text][a]
[link text][A]
</code></pre>

<p>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 &ldquo;Google&rdquo; 链接到 google.com，你可以简化成：</p>

<pre><code>[Google][]
</code></pre>

<p>然后定义链接内容：</p>

<pre><code>[Google]: http://google.com/
</code></pre>

<p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>

<pre><code>Visit [Daring Fireball][] for more information.
</code></pre>

<p>然后接着定义链接：</p>

<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre>

<p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>

<p>下面是一个参考式链接的范例：</p>

<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

[1]: http://google.com/        "Google"
[2]: http://search.yahoo.com/  "Yahoo Search"
[3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>如果改成用链接名称的方式写：</p>

<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

[google]: http://google.com/        "Google"
[yahoo]:  http://search.yahoo.com/  "Yahoo Search"
[msn]:    http://search.msn.com/    "MSN Search"
</code></pre>

<p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>

<pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")
than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
[MSN](http://search.msn.com/ "MSN Search").
</code></pre>

<p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p>

<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>

<p>参考:</p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明（简体中文版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown语法介绍 - 标题和列表]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/21/markdown-introduction-for-title-and-list/"/>
    <updated>2013-11-21T22:30:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/21/markdown-introduction-for-title-and-list</id>
    <content type="html"><![CDATA[<h2>标题</h2>

<p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p>

<p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 &ndash; （第二阶标题），例如：</p>

<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre>

<p>任何数量的 = 和 &ndash; 都可以有效果。</p>

<p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>

<pre><code># 这是 H1

## 这是 H2

###### 这是 H6 
</code></pre>

<!-- more -->


<h2>列表</h2>

<p>Markdown 支持有序列表和无序列表。</p>

<p>无序列表使用星号、加号或是减号作为列表标记：</p>

<pre><code>*   Red
*   Green
*   Blue
</code></pre>

<p>等同于：</p>

<pre><code>+   Red
+   Green
+   Blue
</code></pre>

<p>也等同于：</p>

<pre><code>-   Red
-   Green
-   Blue
</code></pre>

<p>有序列表则使用数字接着一个英文句点：</p>

<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre>

<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果。</p>

<p>如果你的列表标记写成：</p>

<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre>

<p>或甚至是：</p>

<pre><code>3. Bird
1. McHale
8. Parish
</code></pre>

<p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>

<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>

<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>

<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果要在列表项目内放进引用，那 > 就需要缩进：</p>

<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre>

<p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p>

<pre><code>*   一列表项包含一个列表区块：

        &lt;代码写在这&gt;
</code></pre>

<p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>

<pre><code>1986. What a great season.
</code></pre>

<p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p>

<pre><code>1986\. What a great season.
</code></pre>

<p>如果要用嵌套列表，那么下一级列表就要缩进，也就是4个空格或者1个制表符。</p>

<pre><code>+ list1
    - list2
        *   list3
</code></pre>

<p>参考:</p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明（简体中文版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown简介]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/21/markdown-basic-knowledge/"/>
    <updated>2013-11-21T22:15:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/21/markdown-basic-knowledge</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）和亚伦·斯沃茨（Aaron Swartz）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。</p>

<p>Markdown同时还是一个由Gruber编写的Perl脚本：Markdown.pl。它把用markdown语法编写的内容转换成有效的、结构良好的XHTML或HTML内容，并将左尖括号(&lsquo;&lt;&rsquo;)和&amp;号替换成它们各自的字符实体引用。它可以用作单独的脚本，Blosxom和Movable Type的插件又或者BBEdit的文本过滤器.</p>

<!-- more -->


<p>Markdown也已经被其他人用Perl和别的编程语言重新实现，其中一个Perl模块放在了CPAN(Text::Markdown)上。它基于一个BSD风格的许可证分发并可以作为几个内容管理系统的插件。</p>

<p>这是一种[电子邮件风格]的标记语言，其主要目标就是实现[易读易写]。</p>

<p>Markdown的优点有：</p>

<ul>
<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li>
<li>让你专注于文字而不是排版。</li>
<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</li>
<li>Markdown 的标记语法有极好的可读性。</li>
</ul>


<h2>兼容 HTML</h2>

<p>Markdown 语法的目标是：<strong>成为一种适用于网络的书写语言</strong>。</p>

<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。</p>

<p>Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，<strong>Markdown 的格式语法只涵盖纯文本可以涵盖的范围</strong>。</p>

<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>

<p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的<em>开始标签与结尾标签不能用制表符或空格来缩进</em>。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p>

<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>

<pre><code>这是一个普通段落。

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

这是另一个普通段落。
</code></pre>

<p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<em>强调</em>会没有效果。</p>

<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;、&lt;cite&gt;、&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>

<p>和处在 HTML 区块标签间不同，<strong>Markdown 语法在 HTML 区段标签间是有效的</strong>。</p>

<p>参考:</p>

<p><a href="http://wowubuntu.com/markdown/">markdown语法说明（简体中文版）</a></p>

<p><a href="http://jianshu.io/p/q81RER">献给写作者的 Markdown 新手指南</a></p>

<p><a href="http://zh.wikipedia.org/wiki/Markdown">markdown-维基百科</a></p>
]]></content>
  </entry>
  
</feed>
