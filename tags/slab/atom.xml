<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: slab | 李林江的技术博客]]></title>
  <link href="http://lilinj2000.github.io/tags/slab/atom.xml" rel="self"/>
  <link href="http://lilinj2000.github.io/"/>
  <updated>2013-11-28T00:04:56+08:00</updated>
  <id>http://lilinj2000.github.io/</id>
  <author>
    <name><![CDATA[李林江]]></name>
    <email><![CDATA[lilinj2000@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[玩转Memcached by telnet之Stats Slabs]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-stats-slabs/"/>
    <updated>2013-11-27T22:28:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-stats-slabs</id>
    <content type="html"><![CDATA[<h2>Slab statistics</h2>

<p>格式：</p>

<pre><code>stats slabs
</code></pre>

<p>返回信息：</p>

<pre><code>STAT &lt;slabclass&gt;:&lt;stat&gt; &lt;value&gt;\r\n
STAT &lt;stat&gt; &lt;value&gt;\r\n
END\r\n
</code></pre>

<!-- more -->


<p>具体各项解释：</p>

<pre><code>chunk_size: 块大小
chunks_per_page: 一页有多少块，默认一页是1M    
total_pages: 一个slab class共有多少页  
total_chunks: 一个slab class共有多少块                      
get_hits: 获取命中次数在这个slab class上                 
cmd_set: 设置次数在这个slab class上                     
delete_hits: 删除命中次数在这个slab class 上   
incr_hits: 增量修改次数在这个slab class 上             
decr_hits: 减量修改次数在这个slab class上              
cas_hits: cas修改成功次数在这个slab class上           
cas_badval: cas修改失败次数在这个slab class上         
touch_hits: touch修改成功次数在这个slab class上       
used_chunks: 被使用了的块数                          
free_chunks: 没有被使用的块数                        
free_chunks_end: 其值总为0，一般来说是slab分配器的临时变量，
                 当内存被分配以后，就移到了free_chunks，   
                 所以，我们看到的都为0                    
mem_requested: 请求存储在这个slab class中的实际字节数         
active_slabs: 当前已经分配了slab class数                 
total_malloced: 总共被使用了的内存字节数                  
</code></pre>

<p>浪费的空间计算为：</p>

<pre><code>(total_chunks * chunk_size) - mem_requested
</code></pre>

<p>如果看到浪费的的很厉害，要考虑调整slab factor.</p>

<h2>具体示例</h2>

<p>最大内存是1m, 最小空间分配单元是32Bytes, 页大小是1k，默认fractor是1.25</p>

<pre><code>&gt; ./memcached -vvv -I 1k -m 1m -n 32
slab class   1: chunk size        80 perslab      12
slab class   2: chunk size       104 perslab       9
slab class   3: chunk size       136 perslab       7
slab class   4: chunk size       176 perslab       5
slab class   5: chunk size       224 perslab       4
slab class   6: chunk size       280 perslab       3
slab class   7: chunk size       352 perslab       2
slab class   8: chunk size       440 perslab       2
slab class   9: chunk size       552 perslab       1
slab class  10: chunk size       696 perslab       1
slab class  11: chunk size      1024 perslab       1
</code></pre>

<p>Memcached初始化了11个slab classes.</p>

<p>增加一个字节数为2的key1：</p>

<pre><code>add key1 0 0 2
ab
STORED
</code></pre>

<p>内存使用情况：</p>

<pre><code>stats slabs
STAT 1:chunk_size 80
STAT 1:chunks_per_page 12
STAT 1:total_pages 1
STAT 1:total_chunks 12
STAT 1:used_chunks 1
STAT 1:free_chunks 11
STAT 1:free_chunks_end 0
STAT 1:mem_requested 71 #实际存储占用了71字节, 浪费了9个字节
STAT 1:get_hits 0
STAT 1:cmd_set 1
STAT 1:delete_hits 0
STAT 1:incr_hits 0
STAT 1:decr_hits 0
STAT 1:cas_hits 0
STAT 1:cas_badval 0
STAT 1:touch_hits 0
STAT active_slabs 1
STAT total_malloced 960 #总共分配了960字节为这个slab class
END
</code></pre>

<p>增加一个字节数位15的key2：</p>

<pre><code>add key2 0 0 15
123456789012345
STORED
</code></pre>

<p>内存使用情况：</p>

<pre><code>stats slabs
STAT 1:chunk_size 80
STAT 1:chunks_per_page 12
STAT 1:total_pages 1
STAT 1:total_chunks 12
STAT 1:used_chunks 1
STAT 1:free_chunks 11
STAT 1:free_chunks_end 0
STAT 1:mem_requested 71
STAT 1:get_hits 0
STAT 1:cmd_set 1
STAT 1:delete_hits 0
STAT 1:incr_hits 0
STAT 1:decr_hits 0
STAT 1:cas_hits 0
STAT 1:cas_badval 0
STAT 1:touch_hits 0
STAT 2:chunk_size 104
STAT 2:chunks_per_page 9
STAT 2:total_pages 1
STAT 2:total_chunks 9
STAT 2:used_chunks 1
STAT 2:free_chunks 8
STAT 2:free_chunks_end 0
STAT 2:mem_requested 85 #实际存储时85字节，浪费了104 - 85 = 19 字节
STAT 2:get_hits 0
STAT 2:cmd_set 1
STAT 2:delete_hits 0
STAT 2:incr_hits 0
STAT 2:decr_hits 0
STAT 2:cas_hits 0
STAT 2:cas_badval 0
STAT 2:touch_hits 0
STAT active_slabs 2 #当前共有2个slab class
STAT total_malloced 1896 #当前已经分配内存1896字节
END
</code></pre>

<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
</feed>
