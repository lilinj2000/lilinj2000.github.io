<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Memcached | 李林江的技术博客]]></title>
  <link href="http://lilinj2000.github.io/tags/memcached/atom.xml" rel="self"/>
  <link href="http://lilinj2000.github.io/"/>
  <updated>2013-12-06T16:14:50+08:00</updated>
  <id>http://lilinj2000.github.io/</id>
  <author>
    <name><![CDATA[李林江]]></name>
    <email><![CDATA[lilinj2000@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Memcached源码分析之slabs(初始化，分配，释放)]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/12/06/memcached-source-code-analysis-for-slabs/"/>
    <updated>2013-12-06T15:14:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/12/06/memcached-source-code-analysis-for-slabs</id>
    <content type="html"><![CDATA[<h2 id="slabclass">slabclass之数据结构</h2>

<p>```
/* powers-of-N allocation structures */</p>

<p>typedef struct {
    unsigned int size;      /* sizes of items <em>/
    unsigned int perslab;   /</em> how many items per slab */</p>

<pre><code>void *slots;           /* list of item ptrs */
unsigned int sl_curr;   /* total free items in list */

unsigned int slabs;     /* how many slabs were allocated for this class */

void **slab_list;       /* array of slab pointers */
unsigned int list_size; /* size of prev array */

unsigned int killing;  /* index+1 of dying slab, or zero if none */
size_t requested; /* The number of requested bytes */ } slabclass_t;
</code></pre>

<p>static slabclass_t slabclass[MAX_NUMBER_OF_SLAB_CLASSES];
static size_t mem_limit = 0;
static size_t mem_malloced = 0;
static int power_largest;</p>

<p>static void *mem_base = NULL;
static void *mem_current = NULL;
static size_t mem_avail = 0;
```</p>

<h2 id="api--interface">API &amp; Interface</h2>

<p>```
/**
 * @desc
 *  初始化slabclass数组
 * @limit: 内存最大值
 * @factor: chunk大小增长率，默认是1.25
 * @prealloc: 是否预分配
 */
void slabs_init(const size_t limit, const double factor, const bool prealloc);</p>

<p>/**
 *
unsigned int slabs_clsid(const size_t size);
```</p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转Memcached by telnet之Stats Slabs]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-stats-slabs/"/>
    <updated>2013-11-27T22:28:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-stats-slabs</id>
    <content type="html"><![CDATA[<h2 id="slab-statistics">Slab statistics</h2>

<p>格式：</p>

<pre><code>stats slabs
</code></pre>

<p>返回信息：</p>

<pre><code>STAT &lt;slabclass&gt;:&lt;stat&gt; &lt;value&gt;\r\n
STAT &lt;stat&gt; &lt;value&gt;\r\n
END\r\n
</code></pre>

<!-- more -->

<p>具体各项解释：</p>

<pre><code>chunk_size: 块大小
chunks_per_page: 一页有多少块，默认一页是1M    
total_pages: 一个slab class共有多少页  
total_chunks: 一个slab class共有多少块                      
get_hits: 获取命中次数在这个slab class上                 
cmd_set: 设置次数在这个slab class上                     
delete_hits: 删除命中次数在这个slab class 上   
incr_hits: 增量修改次数在这个slab class 上             
decr_hits: 减量修改次数在这个slab class上              
cas_hits: cas修改成功次数在这个slab class上           
cas_badval: cas修改失败次数在这个slab class上         
touch_hits: touch修改成功次数在这个slab class上       
used_chunks: 被使用了的块数                          
free_chunks: 没有被使用的块数                        
free_chunks_end: 除了本页以外的空闲chunk个数，当前只有一页，所以，看到的值位0                
mem_requested: 请求存储在这个slab class中的实际字节数         
active_slabs: 当前已经分配了slab class数                 
total_malloced: 总共被使用了的内存字节数                  
</code></pre>

<p>浪费的空间计算为：</p>

<pre><code>(total_chunks * chunk_size) - mem_requested
</code></pre>

<p>如果看到浪费的的很厉害，要考虑调整slab factor.</p>

<h2 id="section">具体示例</h2>

<p>最大内存是1m, 最小空间分配单元是32Bytes, 页大小是1k，默认fractor是1.25</p>

<pre><code>&gt; ./memcached -vvv -I 1k -m 1m -n 32
slab class   1: chunk size        80 perslab      12
slab class   2: chunk size       104 perslab       9
slab class   3: chunk size       136 perslab       7
slab class   4: chunk size       176 perslab       5
slab class   5: chunk size       224 perslab       4
slab class   6: chunk size       280 perslab       3
slab class   7: chunk size       352 perslab       2
slab class   8: chunk size       440 perslab       2
slab class   9: chunk size       552 perslab       1
slab class  10: chunk size       696 perslab       1
slab class  11: chunk size      1024 perslab       1
</code></pre>

<p>Memcached初始化了11个slab classes.</p>

<p>增加一个字节数为2的key1：</p>

<pre><code>add key1 0 0 2
ab
STORED
</code></pre>

<p>内存使用情况：</p>

<pre><code>stats slabs
STAT 1:chunk_size 80
STAT 1:chunks_per_page 12
STAT 1:total_pages 1
STAT 1:total_chunks 12
STAT 1:used_chunks 1
STAT 1:free_chunks 11
STAT 1:free_chunks_end 0
STAT 1:mem_requested 71 #实际存储占用了71字节, 浪费了9个字节
STAT 1:get_hits 0
STAT 1:cmd_set 1
STAT 1:delete_hits 0
STAT 1:incr_hits 0
STAT 1:decr_hits 0
STAT 1:cas_hits 0
STAT 1:cas_badval 0
STAT 1:touch_hits 0
STAT active_slabs 1
STAT total_malloced 960 #总共分配了960字节为这个slab class
END
</code></pre>

<p>增加一个字节数位15的key2：</p>

<pre><code>add key2 0 0 15
123456789012345
STORED
</code></pre>

<p>内存使用情况：</p>

<pre><code>stats slabs
STAT 1:chunk_size 80
STAT 1:chunks_per_page 12
STAT 1:total_pages 1
STAT 1:total_chunks 12
STAT 1:used_chunks 1
STAT 1:free_chunks 11
STAT 1:free_chunks_end 0
STAT 1:mem_requested 71
STAT 1:get_hits 0
STAT 1:cmd_set 1
STAT 1:delete_hits 0
STAT 1:incr_hits 0
STAT 1:decr_hits 0
STAT 1:cas_hits 0
STAT 1:cas_badval 0
STAT 1:touch_hits 0
STAT 2:chunk_size 104
STAT 2:chunks_per_page 9
STAT 2:total_pages 1
STAT 2:total_chunks 9
STAT 2:used_chunks 1
STAT 2:free_chunks 8
STAT 2:free_chunks_end 0
STAT 2:mem_requested 85 #实际存储时85字节，浪费了104 - 85 = 19 字节
STAT 2:get_hits 0
STAT 2:cmd_set 1
STAT 2:delete_hits 0
STAT 2:incr_hits 0
STAT 2:decr_hits 0
STAT 2:cas_hits 0
STAT 2:cas_badval 0
STAT 2:touch_hits 0
STAT active_slabs 2 #当前共有2个slab class
STAT total_malloced 1896 #当前已经分配内存1896字节
END
</code></pre>

<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcached之内存存储方式介绍]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/27/memcached-for-memory-management/"/>
    <updated>2013-11-27T21:45:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/27/memcached-for-memory-management</id>
    <content type="html"><![CDATA[<h2 id="memcached">Memcached中的内存管理</h2>

<p>Memcached中保存的数据都存储在memcached内置的内存存储空间中。</p>

<p>数据仅存在于内存中，因此重启memcached、重启操作系统会导致全部数据消失。</p>

<p>内存容量达到指定值之后，会基于LRU(Least Recently Used)算法自动删除不使用的缓存，当然这个可以通过配置项来禁止，默认是删除。</p>

<!-- more -->

<p>Memcached本身是为缓存而设计的服务器，并没有过多考虑数据的永久性问题。但是可以利用memcacheDB实现事务恢复、持久化和分布式复制等功能。</p>

<p>Memcached默认情况下采用了名为Slab Allocator的机制分配、管理内存。</p>

<h2 id="slab">Slab分配器简介</h2>

<p>slab是Linux操作系统的一种内存分配机制。</p>

<p>其主要是针对一些<strong>经常分配并释放的对象</strong>，如进程描述符等，这些对象的大小一般比较小，如果直接采用伙伴系统来进行分配和释放，不仅会造成大量的内碎片，而且处理速度也太慢。</p>

<p>slab分配器是基于<strong>对象进行管理</strong>的，相同类型的对象归为一类(如进程描述符就是一类)，每当要申请这样一个对象，slab分配器就从一个slab列表中分配一个这样大小的单元出去，而当要释放时，将其重新保存在该列表中，而不是直接返回给伙伴系统，从而避免内存碎片。</p>

<p>slab分配器并不丢弃已分配的对象，而是释放并把它们保存在内存中。当以后又要请求新的对象时，就可以从内存直接获取而不用重复初始化。</p>

<p>其基本原理是按照预先规定的大小，将分配的内存分割成特定长度的块（chunk），并把尺寸相同的块分成组（chunk的集合）如图。</p>

<p><img src="/images/2013/11/slab_allocate_overview.png" alt="Slab Allocator 示例图" /></p>

<p>分配给slab的所有内存空间叫做Page，在Memcached中，它默认是1MB。</p>

<h2 id="memcachedslabchunk">在Memcached中，数据是如何被存入slab，并最终缓存到chunk</h2>

<p>Memcached根据数据的大小，选择最适合数据大小的slab。</p>

<p>Memcached中保存着slab内空闲chunk的列表，根据该列表选择chunk，然后将数据缓存于其中。</p>

<p><img src="/images/2013/11/slab_allocate_select_method.png" alt="Slab Allocate 选择算法" /></p>

<p>这种机制也给memcached带来了新的问题：由于分配的是特定长度的内存，因此无法有效利用分配的内存。例如，将100字节的数据缓存到128字节的chunk中，剩余的28字节就浪费了（如下图）。</p>

<p><img src="/images/2013/11/slab_allocate_storage.png" alt="Slab Allocate 数据存储方式" /></p>

<p>针对此问题还没有完美的解决方案，但是memcached文档中给出一种思路：
如果预先知道存储的数据的公用大小，或者仅缓存大小相同的数据的情况下，只要使用适合数据大小的组的列表，就可以减少浪费。</p>

<p>另外，也可以通过使用Growth Facor 进行调优，在某种程度上控制slab之间的差异。</p>

<p>因此，在使用memcached前最好能够重新计算一下数据的预期平均长度，调整growth factor ，以获得最恰当的设置。</p>

<p>参考：</p>

<p><a href="http://blog.csdn.net/ldwtill/article/details/8167813">mecached 基础（一）–memcached介绍</a></p>

<p><a href="http://baike.baidu.com/view/5870164.htm">百度百科 - slab</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转Memcached by telnet之Increment and Decrement Command]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-increment-and-decrement/"/>
    <updated>2013-11-27T13:21:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-increment-and-decrement</id>
    <content type="html"><![CDATA[<h2 id="incrementdecrement">Increment/Decrement</h2>

<p>命令”incr” 和 “decr” 是用来增加或者减少相应的数据项， 数据项作为64位无符号的10进制数来对待。</p>

<p>如果当前此数据项，不是一个10进制的数据，则”incr”和”decr”将返回错误。</p>

<p>当然，如果当前的数据项不存在，也将返回错误。</p>

<!-- more -->

<p>格式：</p>

<pre><code>incr &lt;key&gt; &lt;value&gt; [noreply]\r\n

or

decr &lt;key&gt; &lt;value&gt; [noreply]\r\n
</code></pre>

<ul>
  <li>
    <p>&lt;key&gt; 数据项的唯一标识符</p>
  </li>
  <li>
    <p>&lt;value&gt; 增量或者减量的值，如在当前值上增加100，或者减少100</p>
  </li>
  <li>
    <p>[noreply] 可选项，指示server不需要返回</p>
  </li>
</ul>

<p>返回信息：</p>

<ul>
  <li>
    <p>“NOT_FOUND\r\n” 数据项没发现</p>
  </li>
  <li>
    <p>“&lt;value&gt;\r\n”  更新成功后的新的值</p>
  </li>
</ul>

<p>“decr” 减少到小于0时，新的值将被设为0</p>

<p>“incr” 增加到超过了64位无符号的最大值，将会溢出</p>

<pre><code>add key1 0 0 2
10
STORED
incr key1 100
110
get key1
VALUE key1 0 3
110
END
decr key1 50
60
get key1
VALUE key1 0 2
60
END
decr key1 70
0
get key1
VALUE key1 0 1
0
END
add key2 0 0 2
ab
STORED
incr key2 2
CLIENT_ERROR cannot increment or decrement non-numeric value
</code></pre>

<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转Memcached by telnet之Deletion and Touch Command]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-deletion-and-touch/"/>
    <updated>2013-11-27T10:52:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-deletion-and-touch</id>
    <content type="html"><![CDATA[<h2 id="deletion">Deletion</h2>

<p>从memcached中删除数据项.</p>

<p>格式：</p>

<pre><code>delete &lt;key&gt; [noreply]\r\n
</code></pre>

<ul>
  <li>
    <p>&lt;key&gt; 被删除的数据项的唯一标识符</p>
  </li>
  <li>
    <p>[noreply] 可选项，指示server不需要返回</p>
  </li>
</ul>

<p>返回信息：</p>

<ul>
  <li>
    <p>“DELETED\r\n” 删除成功</p>
  </li>
  <li>
    <p>“NOT_FOUND\r\n” 唯一标识符key没有找到</p>
  </li>
</ul>

<!-- more -->

<pre><code>get key2
VALUE key2 0 3
abc
END
delete key2
DELETED
delete key1
NOT_FOUND
</code></pre>

<h2 id="touch">Touch</h2>

<p>更新已经存在数据项的过期时间(expiration time)</p>

<p>格式：</p>

<pre><code>touch &lt;key&gt; &lt;exptime&gt; [noreply]\r\n
</code></pre>

<ul>
  <li>
    <p>&lt;key&gt; 被更新数据项的唯一标识符</p>
  </li>
  <li>
    <p>&lt;exptime&gt; 过期时间</p>

    <ul>
      <li>
        <p>数据项已经过期了， 不能被设置过期时间</p>

        <pre><code>  add key1 0 5 2
  ab
  STORED
        
  #after 5 seconds, the key1 is deleted by system
  get key1
  END
  touch key1 10
  NOT_FOUND
</code></pre>
      </li>
      <li>
        <p>数据项未过期，但是已经过了一段时间，新的过期时间，是从当前时间开始计算，或者是一个新的绝对时间。</p>

        <pre><code>  &gt; cat touch_test.sh
  #! /usr/bin/sh
  {
  echo "add key1 0 30 2"
  sleep 1
  echo "ab"
  sleep 20
  echo "touch key1 60"
  sleep 40
  echo "get key1"
  sleep 20
  echo "get key1"
  } | telnet localhost 11211
        
  &gt; ./touch_test.sh
  Trying 127.0.0.1...
  Connected to localhost.
  Escape character is '^]'.
  STORED          #add key1 successful
  TOUCHED         #after 20s, the touch key1 is successful
  VALUE key1 0 2  #after 40s again, the key1 is fetched.
  ab
  END             
  END             #after 20s again, the key1 is deleted
  Connection closed by foreign host.
</code></pre>
      </li>
      <li>
        <p>此过期时间与storage commands(set, add, replace, append, prepend, cas)选项中的过期时间，是同一个意思。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>[noreply] 可选项，指示server不需要返回</p>
  </li>
</ul>

<p>返回信息：</p>

<ul>
  <li>
    <p>“TOUCHED\r\n” 更新成功</p>
  </li>
  <li>
    <p>“NOT_FOUND\r\n” 唯一标识符key没有找到</p>
  </li>
</ul>

<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
</feed>
