<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Memcached介绍 | 李林江的技术博客]]></title>
  <link href="http://lilinj2000.github.io/blog/categories/memcachedjie-shao/atom.xml" rel="self"/>
  <link href="http://lilinj2000.github.io/"/>
  <updated>2013-11-27T13:18:00+08:00</updated>
  <id>http://lilinj2000.github.io/</id>
  <author>
    <name><![CDATA[李林江]]></name>
    <email><![CDATA[lilinj2000@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[玩转memcached by telnet之Deletion and Touch Command]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-deletion-and-touch/"/>
    <updated>2013-11-27T10:52:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/27/playing-memcached-by-telnet-deletion-and-touch</id>
    <content type="html"><![CDATA[<h2>Deletion</h2>

<p>从memcached中删除数据项.</p>

<p>格式：</p>

<pre><code>delete &lt;key&gt; [noreply]\r\n
</code></pre>

<ul>
<li><p>&lt;key> 被删除的数据项的唯一标识符</p></li>
<li><p>[noreply] 可选项，指示server不需要返回</p></li>
</ul>


<p>返回信息：</p>

<ul>
<li><p>&ldquo;DELETED\r\n&rdquo; 删除成功</p></li>
<li><p>&ldquo;NOT_FOUND\r\n&rdquo; 唯一标识符key没有找到</p></li>
</ul>


<!-- more -->


<pre><code>get key2
VALUE key2 0 3
abc
END
delete key2
DELETED
delete key1
NOT_FOUND
</code></pre>

<h2>Touch</h2>

<p>更新已经存在数据项的过期时间(expiration time)</p>

<p>格式：</p>

<pre><code>touch &lt;key&gt; &lt;exptime&gt; [noreply]\r\n
</code></pre>

<ul>
<li><p>&lt;key> 被更新数据项的唯一标识符</p></li>
<li><p>&lt;exptime> 设置的过期时间</p>

<ul>
<li><p>数据项已经过期了， 不能被设置过期时间</p>

<pre><code>  add key1 0 5 2
  ab
  STORED

  #after 5 seconds, the key1 is deleted by system
  get key1
  END
  touch key1 10
  NOT_FOUND
</code></pre></li>
<li><p>数据项未过期，但是已经过了一段时间，新的过期时间，是从当前时间开始计算，或者是一个新的绝对时间。</p>

<pre><code>  &gt; cat touch_test.sh
  #! /usr/bin/sh
  {
  echo "add key1 0 30 2"
  sleep 1
  echo "ab"
  sleep 20
  echo "touch key1 60"
  sleep 40
  echo "get key1"
  sleep 20
  echo "get key1"
  } | telnet localhost 11211

  &gt; ./touch_test.sh
  Trying 127.0.0.1...
  Connected to localhost.
  Escape character is '^]'.
  STORED          #add key1 successful
  TOUCHED         #after 20s, the touch key1 is successful
  VALUE key1 0 2  #after 40s again, the key1 is fetched.
  ab
  END             
  END             #after 20s again, the key1 is deleted
  Connection closed by foreign host.
</code></pre></li>
<li><p>此过期时间与storage commands(set, add, replace, append, prepend, cas)选项中的过期时间，是同一个意思。</p></li>
</ul>
</li>
<li><p>[noreply] 可选项，指示server不需要返回</p></li>
</ul>


<p>返回信息：</p>

<ul>
<li><p>&ldquo;TOUCHED\r\n&rdquo; 更新成功</p></li>
<li><p>&ldquo;NOT_FOUND\r\n&rdquo; 唯一标识符key没有找到</p></li>
</ul>


<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转memcached by telnet之Retrieval Command]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/26/playing-memcached-by-telnet-retrieval-command/"/>
    <updated>2013-11-26T16:06:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/26/playing-memcached-by-telnet-retrieval-command</id>
    <content type="html"><![CDATA[<h2>Retrieval commands</h2>

<h3>格式：</h3>

<pre><code>get &lt;key&gt;*\r\n
gets &lt;key&gt;*\r\n
</code></pre>

<ul>
<li>&lt;key>* 一个或者多个key，由空白符分隔。</li>
</ul>


<p>在零个或者多个key/value被返回后，server端会返回字符串"END\r\n"指示返回结束。</p>

<!-- more -->


<p>返回信息：</p>

<pre><code>VALUE &lt;key&gt; &lt;flags&gt; &lt;bytes&gt; [&lt;cas unique&gt;]\r\n
&lt;data block&gt;\r\n
</code></pre>

<ul>
<li><p>&lt;key> 发送的key值</p></li>
<li><p>&lt;flags> 在数据被存储时，设置的flags信息</p></li>
<li><p>&lt;bytes> 存储的数据长度，不包括分隔符 <code>\r\n</code></p></li>
<li><p>[&lt;cas unique>] 唯一标识的64位整数，在Command <code>cas</code> 中被使用</p></li>
<li><p>&lt;data block> 数据块</p></li>
</ul>


<p>数据不能被获取的情况有：</p>

<ul>
<li><p>数据从来没有被存储</p></li>
<li><p>数据被存储，但是获取时已经过期</p></li>
<li><p>数据被存储，数据已经显示被删除了</p></li>
<li><p>数据被存储，由于内存原因，基于LRU算法，数据已经被系统删除</p></li>
</ul>


<h3>Command get</h3>

<p>获取一个或者多个key的值，<strong>不返回</strong><code>&lt;cas unique&gt;</code></p>

<pre><code>get key1
VALUE key1 0 2
ab
END
get key1 key2
VALUE key1 0 2
ab
VALUE key2 0 3
abc
END
get key1 key3  #without stored key3
VALUE key1 0 2
ab
END
</code></pre>

<h3>Command gets</h3>

<p>获取一个或者多个key的值，<strong>返回</strong><code>&lt;cas unique&gt;</code></p>

<pre><code>gets key1
VALUE key1 0 2 7
ab
END
gets key1 key2
VALUE key1 0 2 7
ab
VALUE key2 0 3 3
abc
END
gets key1 key3
VALUE key1 0 2 7
ab
END
</code></pre>

<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩转memcached by telnet之Storage Command]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/26/playing-memcached-by-telnet-storage-command/"/>
    <updated>2013-11-26T14:14:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/26/playing-memcached-by-telnet-storage-command</id>
    <content type="html"><![CDATA[<h2>环境</h2>

<ul>
<li><p>memcahced 帮助信息</p>

<pre><code>  &gt; memcahched -h
  memcached 1.4.15_6_g87e2f36
  -p &lt;num&gt;      TCP port number to listen on (default: 11211)
  -U &lt;num&gt;      UDP port number to listen on (default: 11211, 0 is off)
  ...
</code></pre></li>
<li><p>start memcached</p>

<pre><code>  &gt; memcached 
</code></pre></li>
<li><p>telnet to memcached server by default port 11211</p>

<pre><code>  &gt; telnet localhost 11211
</code></pre></li>
</ul>


<!-- more -->


<h2>Storage commands</h2>

<h3>格式：</h3>

<pre><code>&lt;command name&gt; &lt;key&gt; &lt;flags&gt; &lt;exptime&gt; &lt;bytes&gt; [noreply]\r\n  
&lt;data block&gt;\r\n
</code></pre>

<ul>
<li><p>&lt;key> memcached存储数据的唯一标识符。key是一个字符串，目前它的长度被限制在<strong>250</strong>个字符；key<strong>不能包括控制字符或者空白字符</strong>。</p></li>
<li><p>&lt;flags> 一个16位的无符号整数（十进制格式），server只是存储它，当client获取数据时返回同样的值。client可以用这个字段作为特殊的标记使用。<br/>
  在memcached版本1.2. 1或以后，这个字段是一个32位，但是最好你还是限制使用16位，为了兼容以前的版本。</p></li>
<li><p>&lt;exptime> 数据过期时间。<br/>
  值为0时，表示永远不过期，当然也可能会被删除，因为LRU算法。<br/>
  非0时，表示一个有效的系统时间，或者是一个当前时间的offset，单位是秒；它确保client不能获取数据当达到这个过期时间（由server段的时间决定）时。</p></li>
<li><p>&lt;bytes> 数据的字节数，不包括分隔符，<code>\r\n</code>，字节数也可以为0，表示空数据。</p></li>
<li><p>[noreply] 可选项，指示server端可以不返回信息。<br/>
  注意，当命令格式不对时，server不能可靠地解析此选项 <em>noreply</em> ，此时，server会返回错误给客户端，如果客户端没有处理错误信息，可能会有些问题。当用这个选项时，最好确保客户端永远只构造有效的命令请求。</p></li>
<li><p><data block\> 一块任意8位组的数据，其长度应该是前面给到的 <code>&lt;byters&gt;</code>值。</p></li>
</ul>


<p>返回信息描述：</p>

<ul>
<li><p>&ldquo;STORED\r\n&rdquo; 存储数据成功.</p></li>
<li><p>&ldquo;NOT_STORED\r\n&rdquo; 此数据没有被存储。</p></li>
</ul>


<h3>Command set</h3>

<p>设置数据，如果key已经存在，就更新数据，如果key不存在，就增加数据。</p>

<pre><code>set key1 0 0 2
12
STORED
</code></pre>

<h3>Command add</h3>

<p>新增数据，如果key已经存在，会返回失败。</p>

<pre><code>add key2 0 0 3
abc
STORED
add key1 0 0 3
abc
NOT_STORED
</code></pre>

<h3>Command replace</h3>

<p>更新数据，如果key不存在，则返回失败。</p>

<pre><code>replace key1 0 0 2
12
STORED
replace key3 0 0 2
ab
NOT_STORED
</code></pre>

<h3>Command append</h3>

<p>在已经存在的数据后面追加数据，如果key不存在，则返回失败。</p>

<pre><code>append key1 0 0 2
ab
STORED
append key3 0 0 2
ab
NOT_STORED
</code></pre>

<h3>Command prepend</h3>

<p>在已经存在的数据前面追加数据，如果key不存在，则返回失败。</p>

<pre><code>prepend key1 0 0 2
cd
STORED
prepend key3 0 0 3
abc
NOT_STORED
</code></pre>

<h3>Command cas</h3>

<p>check and set, 只有此数据自上次获取以后没有被更新，才设置数据。</p>

<p>格式：</p>

<pre><code>cas &lt;key&gt; &lt;flags&gt; &lt;exptime&gt; &lt;bytes&gt; &lt;cas unique&gt; [noreply]\r\n
&lt;data block&gt;\r\n
</code></pre>

<ul>
<li><cas unique> 一个64位的唯一的已经存在的entry, 此值是通过<code>gets</code>命令获得的.</li>
</ul>


<p>返回信息：</p>

<ul>
<li><p>&ldquo;EXISTS\r\n&rdquo; 指示要存储的数据自从上次获取以来已经被修改了，命令存储失败。</p></li>
<li><p>&ldquo;NOT_FOUND\r\n&rdquo; 指示试图存储的数据不存在，命令存储失败.</p></li>
</ul>


<p>示例：</p>

<pre><code>gets key1
VALUE key1 0 6 6 #最后一项是&lt;cas unique&gt;值
cd12ab
END

cas key1 0 0 2 6
ab
STORED

cas key1 0 0 2 6
cd
EXISTS

gets key1
VALUE key1 0 2 7 #&lt;cas unique&gt;值已经变成7
ab
END

cas key3 0 0 2 8
12
NOT_FOUND
</code></pre>

<p><a href="https://github.com/lilinj2000/memcached/blob/master/doc/protocol.txt">更详细信息请参考这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识 Memcached]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/11/24/warmup-memcached/"/>
    <updated>2013-11-24T16:13:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/11/24/warmup-memcached</id>
    <content type="html"><![CDATA[<h2>什么是 Memcached？</h2>

<blockquote><p>Free &amp; open source, high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.</p>

<p>Memcached is an in-memory key-value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, or page rendering.</p>

<p>Memcached is simple yet powerful. Its simple design promotes quick deployment, ease of development, and solves many problems facing large data caches. Its API is available for most popular languages.</p>

<p>At heart it is a simple Key/Value store.</p></blockquote>

<p>Memcached是一个<strong>免费，开源，高性能，分布式</strong>的内存对象cache系统。</p>

<p>Memcached是一个<strong>简单，强大</strong>的key/value存储。</p>

<!-- more -->


<h2>Memcached的历史</h2>

<p>official web site: <a href="http://www.memcached.org/">http://www.memcached.org/</a></p>

<p>project home: <a href="https://code.google.com/p/memcached/">https://code.google.com/p/memcached/</a></p>

<p>Memcached 是由 Brad Fitzpatrick 于2003年5月，为他的网站 LiveJournal 第一次开发的，后来由 Anatoly Vorobey 用 C 语言从写。</p>

<h2>Memcached 适合什么场合</h2>

<p><img src="/images/2013/11/memcached_general_use_case.png" alt="memcached general use case" /></p>

<p>Memcached 是“分布式”的内存对象缓存系统，那些不需要“分布”的，不需要共享的，或者干脆规模小到只有一台服务器的应用， memcached 不会带来任何好处，相反还会拖慢系统效率，因为网络连接同样需要资源，即使是UNIX本地连接也一样。</p>

<p>Memcached 在很多时候都是<strong>作为数据库前端 cache 使用的</strong>。因为它比数据库少了很多 SQL 解析、磁盘操作等开销，而且它是使用内存来管理数据的，所以它可以提供比直接读取数据库更好的性能，在大型系统中，访问同样的数据是很频繁的， memcached 可以大大降低数据库压力，使系统执行效率提升。</p>

<p>Memcached 也经常作为<strong>服务器之间数据共享的存储媒介</strong>，例如在 SSO 系统中保存系统单点登陆状态的数据就可以保存在 memcached 中，被多个应用共享。</p>

<p>Memcached 使用内存管理数据，所以它是<strong>易失</strong>的，当服务器重启，或者 memcached 进程中止，数据便会丢失，所以 memcached 不能用来持久保存数据。很多人的错误理解，memcached 的性能非常好，好到了内存和硬盘的对比程度，其实 memcached 使用内存并不会得到成百上千的读写速度提高，它的实际瓶颈在于网络连接，它和使用磁盘的数据库系统相比，好处在于它本身非常“轻”，因为没有过多的开销和直接的读写方式，它可以轻松应付非常大的数据交换量，所以经常会出现两条千兆网络带宽都满负荷了，memcached 进程本身并不占用多少CPU资源的情况。</p>

<p>Memcached 最大的优点是<strong>可以分布式的部署</strong>，这对于大规模应用来说也是必不可少的要求。</p>

<h2>Memcached 的主要用户有</h2>

<p><img src="/images/2013/11/memcached_typical_users.png" alt="memcached typical users" /></p>

<p>参考：</p>

<p><a href="http://haoshenqi.blogchina.com/1538799.html">Memcached&mdash;&mdash;-memcached实现内存缓存</a></p>

<p><a href="http://blog.csdn.net/ldwtill/article/details/8167813">mecached 基础（一）&mdash;memcached介绍</a></p>

<p><a href="http://wenku.baidu.com/link?url=TuT7znQSC6wyQ-sVmuq7iWGXYSm9h7cOJ_XXqV9L164GhqC83Vf60OH1Bf_mwmekeuZrE0cP2sgnWXrJjc3kmz4OmlEQWHtnfZJaXtRH8LK">Memcached浅析</a></p>
]]></content>
  </entry>
  
</feed>
