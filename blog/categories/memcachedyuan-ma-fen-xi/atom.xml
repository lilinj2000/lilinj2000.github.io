<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Memcached源码分析 | 李林江的技术博客]]></title>
  <link href="http://lilinj2000.github.io/blog/categories/memcachedyuan-ma-fen-xi/atom.xml" rel="self"/>
  <link href="http://lilinj2000.github.io/"/>
  <updated>2013-12-06T16:14:50+08:00</updated>
  <id>http://lilinj2000.github.io/</id>
  <author>
    <name><![CDATA[李林江]]></name>
    <email><![CDATA[lilinj2000@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Memcached源码分析之slabs(初始化，分配，释放)]]></title>
    <link href="http://lilinj2000.github.io/blog/2013/12/06/memcached-source-code-analysis-for-slabs/"/>
    <updated>2013-12-06T15:14:00+08:00</updated>
    <id>http://lilinj2000.github.io/blog/2013/12/06/memcached-source-code-analysis-for-slabs</id>
    <content type="html"><![CDATA[<h2 id="slabclass">slabclass之数据结构</h2>

<p>```
/* powers-of-N allocation structures */</p>

<p>typedef struct {
    unsigned int size;      /* sizes of items <em>/
    unsigned int perslab;   /</em> how many items per slab */</p>

<pre><code>void *slots;           /* list of item ptrs */
unsigned int sl_curr;   /* total free items in list */

unsigned int slabs;     /* how many slabs were allocated for this class */

void **slab_list;       /* array of slab pointers */
unsigned int list_size; /* size of prev array */

unsigned int killing;  /* index+1 of dying slab, or zero if none */
size_t requested; /* The number of requested bytes */ } slabclass_t;
</code></pre>

<p>static slabclass_t slabclass[MAX_NUMBER_OF_SLAB_CLASSES];
static size_t mem_limit = 0;
static size_t mem_malloced = 0;
static int power_largest;</p>

<p>static void *mem_base = NULL;
static void *mem_current = NULL;
static size_t mem_avail = 0;
```</p>

<h2 id="api--interface">API &amp; Interface</h2>

<p>```
/**
 * @desc
 *  初始化slabclass数组
 * @limit: 内存最大值
 * @factor: chunk大小增长率，默认是1.25
 * @prealloc: 是否预分配
 */
void slabs_init(const size_t limit, const double factor, const bool prealloc);</p>

<p>/**
 *
unsigned int slabs_clsid(const size_t size);
```</p>

<!-- more -->

]]></content>
  </entry>
  
</feed>
